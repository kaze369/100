/*爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：
选出任一 x，满足 0 < x < N 且 N % x == 0 。
用 N - x 替换黑板上的数字 N 。
如果玩家无法执行这些操作，就会输掉游戏。
只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 False。假设两个玩家都以最佳状态参与游戏。
示例 1：
输入：2
输出：true
解释：爱丽丝选择 1，鲍勃无法进行操作。*/

/*n=1时，先走输；
n=2时，先走赢；
先存进dp数组里，代表子问题的最优解。

=3之后，先走的如果想赢，就需要找到小于n的数k，
能使得在符合条件（n%k==0）的基础上还能让n-k（下一局的n）是先走输。（即n-k的最优解是输，即下一局的人也是输。）*/
bool divisorGame(int N){
    bool dp[1001];

    dp[1]=false;
    dp[2]=true;

    for(int i=3;i<=N;i++)
    {
        dp[i]=false;
        for(int j=1;j<i;j++)          //内层循环，此时i即为被除数n，j为除数k
            if((dp[i-j]==false)&&(i%j==0))
            {
                dp[i]=true;
                break;
            }
    }
                 
    return dp[N];            
}
