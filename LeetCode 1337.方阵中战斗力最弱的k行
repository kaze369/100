

/*对每列进行遍历，最先找到0的，说明弱，最后对总的个数进行校验，如果总个数< k，说明剩余全一的情况未被选上，从第一行遍历到最后一行找到未被标记过的行，一直累加到k.*/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* kWeakestRows(int** mat, int matSize, int* matColSize, int k, int* returnSize){
    if (mat == NULL || matSize == 0 || matColSize == NULL || k == 0 || k > matSize) {
        (*returnSize) = 0;
        return NULL;
    }
    int *res = malloc(sizeof(int) * matSize);
    int i, j;
    int idx = 0;
    // 统计
    int *flag = malloc(sizeof(int) * matSize);
    for (i = 0; i < matSize; i++) {
        flag[i] = 0;
    }
    for (i = 0; i < (*matColSize); i++) {
        for (j = 0; j < matSize; j++) {
            if (mat[j][i] == 0 && flag[j] == 0) {
                res[idx] = j;
                flag[j] = 1;
                idx++;
                if (idx == k) {
                    (*returnSize) = k;
                    return res;
                } 
            }
        }
    }
    if (idx < k) {
        for (i = 0; i < matSize; i++)
            if (flag[i] == 0)
                res[idx++] = i;
    }

    (*returnSize) = k;
    return res;
    
}
