/*数组的每个索引作为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)。
每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。
您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。
示例 1:
输入: cost = [10, 15, 20]
输出: 15
解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。*/

/*因为第 i 个位置可以从 第 i - 2 位置跳过来，也可以从 i - 1 位置跳过来
状态转移方程
dp[i] = Min(dp[i - 2] + cost[i - 2], dp[i - 1] + cost[i - 1])*/

#define MAX_SIZE 1001
int Min(int a, int b)
{
    return a > b ? b : a;
}
int minCostClimbingStairs(int* cost, int costSize){
    int dp[MAX_SIZE] = {0};  
    dp[0] = 0;    
    dp[1] = 0;   
    for (int i = 2; i <= costSize; i++) {
        dp[i] = Min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
    }   
   return dp[costSize];
}
