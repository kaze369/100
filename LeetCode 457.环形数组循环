/*给定一个含有正整数和负整数的环形数组 nums。 如果某个索引中的数 k 为正数，则向前移动 k 个索引。相反，如果是负数 (-k)，则向后移动 k 个索引。因为数组是环形的，所以可以假设最后一个元素的下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。
确定 nums 中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度 > 1。此外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，一个循环中不能同时包括向前的运动和向后的运动。
示例 1：
输入：[2,-1,1,2,2]
输出：true
解释：存在循环，按索引 0 -> 2 -> 3 -> 0 。循环长度为 3 。*/
bool check(int begin,int* nums, int numsSize)
{
    int slow = begin;
    int count = numsSize+1;   //大于numsSize + 1次还没回来 就是这个节点没环
    while (count != 0) {
        int next = ((slow + nums[slow]) % numsSize + numsSize) % numsSize;
        if(nums[slow] > 0 && nums[next] < 0) return false;
        if(nums[slow] < 0 && nums[next] > 0) return false;
        if(slow == next) return false; //如果是一次就跳到自己的 不构成环
        slow = next;
        count--;
        if(slow == begin) return true; //形成环就返回
    }
    return false;
}

bool circularArrayLoop(int* nums, int numsSize)
{
    if (numsSize == 0) return false;
    for (int i = 0; i < numsSize; i++) {
        if(check(i, nums, numsSize)) return true;
    }
    return false;
}
