/*给你一个 m * n 的矩阵，矩阵中的元素不是 0 就是 1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。
示例 1：
输入：matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
输出：15
解释： 
边长为 1 的正方形有 10 个。
边长为 2 的正方形有 4 个。
边长为 3 的正方形有 1 个。
正方形的总数 = 10 + 4 + 1 = 15.*/


/*令f[i][j]表示以(i,j)为右下角元素的子矩阵最大边长，同时它也表示这种子矩阵的个数。
那么f[i][j] = min(f[i][j-1], f[i-1][j], f[i-1]f[j-1]) + 1，即取决于它左边、上方、左上的三个中最小的那个*/

inline int min(int a, int b, int c){
    if (a < b) return a<c?a:c; 
    else return b<c?b:c;
}

int countSquares(int** matrix, int matrixSize, int* matrixColSize){
    if (!matrixSize || !*matrixColSize)  
        return 0;
    int sum = 0;
    int row = matrixSize, col = *matrixColSize;
    int** f = (int**)calloc(sizeof(int*), row);
    for (int i = 0; i < row; i++) {
        f[i] = (int*)calloc(sizeof(int), col);
        sum += (f[i][0] = matrix[i][0]);
    }
    for (int j = 1; j < col; j++)
        sum += (f[0][j] = matrix[0][j]);
    
    for (int i = 1; i < row; i++) {
        for (int j = 1; j < col; j++){
            if (matrix[i][j])
                sum += (f[i][j] = min(f[i-1][j-1], f[i-1][j], f[i][j-1]) + 1);
        }
    }
    return sum;
}
