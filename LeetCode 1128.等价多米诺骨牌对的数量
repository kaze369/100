/*给你一个由一些多米诺骨牌组成的列表 dominoes。
如果其中某一张多米诺骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。
形式上，dominoes[i] = [a, b] 和 dominoes[j] = [c, d] 等价的前提是 a==c 且 b==d，或是 a==d 且 b==c。
在 0 <= i < j < dominoes.length 的前提下，找出满足 dominoes[i] 和 dominoes[j] 等价的骨牌对 (i, j) 的数量。
示例：
输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]
输出：1*/

int numEquivDominoPairs(int** dominoes, int dominoesSize, int* dominoesColSize){
    int min(int a, int b);
    int Ret = 0;
    int Characterastic[10][9] = {0};
    for(int i = 0; i < dominoesSize; i++){
        int x = min(dominoes[i][0], dominoes[i][1]);
        int y = abs(dominoes[i][0] - dominoes[i][1]);
        Ret += (Characterastic[x][y]++);
    }
    return Ret;
}
int min(int a, int b){
    return a <= b ? a : b;
}
